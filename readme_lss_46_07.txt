Документация
============

Задача: Решение СЛАУ (Метод решения через построение LU разложения.)
--------------------------------------------------------------------------

Выполнил: Солиев Музаффар / Группа: М1-15
-------------------------------------------

==================
запуск программы:

> <название исполняемого файла>(.exe) <входной файл> <выходной файл> <аргументы>

Где аргументы:
  -d    	вывод в консоль сообщений отладки и хода решений [по-умолчанию откл]
  -e    	вывод ошибок [по-умолчанию откл]
  -p    	вывод матрицы в самом начале [по-умолчанию откл]
  -t    	вывод времени выполнения программы [по-умолчанию откл]
  -h, -?	справка
  
По умолчанию входной/выходной файл:
lss_46_07_in.txt
lss_46_07_out.txt
==================
error - флаг ошибок
debug - флаг отладки

Коды ошибки
	 0 - ошибок нет.
	-1 - входной файл не открыт.
	-2 - файл пуст либо количество уравений меньше нуля.
	-3 - не удалось выделить память.
	-4 - не удалось считать элемент матрицы.
	-5 - выходной файл не открыт.
	-6 - задана неверный аргумент.


________________________________________________________________________________________
size_t lss_memsize_46_07(int n)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Аргументы:
int n - целое число
----------------------------------------------------------------------------------------
- функция возвращает размер(в байтах) необходимый для массива с количеством элементов n.


________________________________________________________________________________________
void multiplicationMatrix(double *A, double *B, int n, double *AB, double precision)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Аргументы:
n - размерность матриц
*A - указаель на первую матрицу
*B - указатель на вторую матрицу
*AB - указатель на матрицу в которую будут записываться произвеление матриц A и B.
precision - это такое число, что все числа меньше precision равны нулю.
----------------------------------------------------------------------------------------
- процедура умножает матрицу A на матрицу B и записывте значение в матрицу AB


________________________________________________________________________________________
void printEquation(double *A, double *B, int n)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Аргументы:
double *A - указатель на массив коэффициентов СЛАУ
double *B - указатель на массив свободных членов СЛАУ
n - число уравнений в СЛАУ
----------------------------------------------------------------------------------------
- процедура пречатает массив коэффициентов и свободных членов СЛАУ в виде матрицы.

________________________________________________________________________________________
void printMatrix(double *A, int n)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Аргументы:
double *A - указатель на массив коэффициентов СЛАУ
n - число уравнений в СЛАУ
----------------------------------------------------------------------------------------
- процедура пречатает матрицу n x n.

________________________________________________________________________________________
size_t stringLength(const char *str)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Аргументы:
const char *str - указатель на строку
----------------------------------------------------------------------------------------
- функция возвращает количество символов в строке str.
Перебирает все символы, пока не встретится символ('\0') и увеличивает
счётчик. Когда встречается первый нулевой символ возвращает значение счётчика.

________________________________________________________________________________________
int stringComp(const char *str1, const char *str2)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Аргументы:
const char *str1 - указатель на первую строку
const char *str2 - указатель на вторую строку
----------------------------------------------------------------------------------------
- функция посимвольно сравнивает две строки (str1 и str2) и выдает:
	-1 - когда длины двух строк разные или эти строри разные
	 0 - когда две строки совпадают
	 
________________________________________________________________________________________
int lss_46_07(int n, double *A, double *B, double *X, double *tmp)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Аргументы:
n - размерность матрицы (количество уравений и неизвестных)
*A - указатель на массив элементов матрицы (коэф. при неизвестных в уравении, одномерный массив.
матрица задана как последовательность а<0,0> а<0,1> ... а<0,n> .... a<n,n>)
*B - указатель на массив свободных членов
*X - указатель на массив хранящий решение СЛАУ (вначале пуст, заполняется по ходу
решения СЛАУ)
*tmp -  массив дополнительной памяти
----------------------------------------------------------------------------------------
- Функция решатель СЛАУ методом через построение LU разложения и возвращает
	-1 - когда метод не применим к данному уравнение
	 0 - когда решение найдено.

Алгоритм:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1.1 Строим матрицы L и U по системе формул (13) (стр.20 Богачёв)(произведение матриц L и U должно быть равно A)
1.2 Получем матрицы L - нижняя треугольная и U - верхняя треугольная.
1.3 Решаем уравнение (обратным ходом) L*X'=B и получаем вектор X'.
1.4 Решаем уравнение (обратным ходом) U*X=X' и получаем вектор решений X.


epsilon по умолчанию 1e-14.



